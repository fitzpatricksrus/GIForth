

struct DictionaryEntry {
    string name;
    DictionaryEntry* next;
    void* data;
}







// :P compiles a primative
// :I compiles an immediate word

:P (NOP)            // P_NOP

:P sizeof(char)     // P_CHAR_SIZE
:P sizeof(cell)     // P_CELL_SIZE

:P c@               // P_CHAR_AT
:P c!               // P_CHAR_PUT
:P c[]              // P_CHAR_INDEX

:P @                // P_CELL_AT
:P !                // P_CELL_PUT
:P []               // P_CELL_INDEX

:P allocate         // P_ALLOCATE
:P free             // P_FREE

:P >r               // P_TO_RETURN_STACK
:P <r               // P_FROM_RETURN_STACK

:P pick             // P_PICK
:P roll             // P_ROLL
:P drop             // P_DROP

:P +                // P_ADD
:P -                // P_SUBTRACT
:P *                // P_MULTIPLY
:P /                // P_DIVIDE
:P %                // P_MOD

:P <                // P_LESS_THAN,
:P >                // P_GREATER_THAN,
:P ==               // P_EQUAL,

:P &&               // P_CONDITIONAL_AND,
:P ||               // P_CONDITIONAL_OR,
:P !                // P_CONDITIONAL_NOT,

:P (JUMP)           // P_JUMP,
:P (JUMP_IF_FALSE)  // P_JUMP_IF_FALSE,
:P (PUSH_NEXT_CELL) // P_PUSH_NEXT_CELL,
:P (RETURN)         // P_RETURN,

:P peekNextInpuChar // P_PEEK_NEXT_INPUT_CHAR,
:P getNextInputChar // P_GET_NEXT_INPUT_CHAR,
:P printChar        // P_PRINT_CHAR,

:P compileTOS()
:P compilerPosition()

:P :c[]
:P accept()    // addr len --
:P :word
:P :char
:P find()      // strAddr -- word bool 1 or 0
:P executeTOS()  // addr --
:P parseNumber()   // str -- value 1 or 0
:P parseString()
:P print()     // addr --
:P println()   // addr --
:P clearTib()
:P beginCompileNewWord()            //  strAddr --
:P abortCompileNewWord()
:P endCompileNewWord()
:P :w[]
:P -1
:P 0
:P 1
:P 255
:P 256
:P 65535
:P 65536

: dup 1 pick ;
: swap 1 rot ;

: compile: >r dup @ swap 1 + r> compileTOS() ;

:I while: compilerPosition() ;

:I do compile: (JUMP_IF_FALSE) compilerPosition() compile: (NOP) ;

: compileJumpTo()           // where to jump to ---
    compile: (JUMP) compilerPosition() 1 + - compileTOS()
;

: compileJumpFrom()                // where to jump from to current pos
    dup compilerPosition() swap - swap !
;

:I :while   // whilePos exitJmpPos
    swap    // exitJmpPos whilePos
    compileJumpTo()     // jump to while condition
    compileJumpFrom()   // jump from jmp-if-false
;

:I if:
     compile: JMP_IF_FALSE
;

:I :if
    compileJumpFrom()   // jump from jmp-if-false
;

:I :else:
    compile: (JMP)
    compilerPosition()
    compile: (NOP)
    swap
    compileJumpFrom()
;

: repeat:
    compilerPosition()
;
: :until
    compile: (JMP_IF_FALSE) compilerPosition() compilerPosition() 1 + - compileTOS();
;

: != == ! ;

// return the length of a null terminated string
: strLength() // addr -- length
	dup
	while: dup c@ != 0 do
		1 +
	:while
	swap -
;

: MAX_INPUT_LENGTH 255 ;
:c[] keyboardBuffer 256 ;
0 keyboardBuffer c!
: readLine()
    repeat:
        keyboardBuffer MAX_INPUT_LENGTH accept()
        keyboardBuffer c@ 0 !=
    :until
;

:word token ;
keyboardBuffer token !
:word tokenPos ;
token @ tokenPos !
: @1+! dup @ 1 + swap ! ;
: getNextChar()                 // -- char
    tokenPos @ c@ dup 0 == if:  // EOL
        readLine()
        keyboardBuffer token !
        keyboardBuffer tokenPos !
    :else:
        tokenPos @1+!
    :if
;

: isDelimiter() // char -- bool
    dup 32 == if:
        1
    :else:
        dup 0 == if:
            1
        :else:
            0
        :if
    :if
;

: getNextToken
    // skip delimeters
    // collect until delimeter










: skipDelimiterChar()
    token @ c@ 0 == if:
        readLine()
    :if
;

: nextToken()
    token @ c@ 0 == if:
		readTokens()
    :if
    token ((token @) + (token @ strLength())) !
;

: clearTib()
    keyboardBuffer0 c!
    token keyboardBuffer!
;

:char keepRunningCommandLineInterp ;
keepRunningCommandLineInterp 1 c!
: commandLineInterp
    while: keepRunningCommandLineInterp @ do
		token @ find() if:
			nextToken()
		    drop
			executeTOS()
		:else:
			token @ parseNumber() if:
				nextToken()
			:else:
			    token @ parseString() if:
			        nextToken();
			    :else:
                    token @ print()
                    "?" println()
                    clearTib()
                :if
			:if
		:if
	:while
;

: compileWord
    beginCompileNewWord()
    nextToken()
    while: token @ c@ ';' != do
        token @ find() if:
            if: //immediate word
                executeTOS();
            :else:
                compileTOS()
            :if
        :else:
            token @ parseNumber() if:
                compile: (PUSH_NEXT_CELL)
                compileTOS()
            :else:
                token @ parseString() if:
                    compile: (PUSH_NEXT_CELL)
                    compileTOS()
                :else:
                    // word not a literal or found in dictionary
                    token @ print()
                    "?" println()
                    clearTib()
                    abortCompileNewWord()
                :if
            :if
        :if
        nextToken()
    :while
    endCompileNewWord()
;

: :
    0
    compileWord();
;

: :I
    1
    compileWord()
;

